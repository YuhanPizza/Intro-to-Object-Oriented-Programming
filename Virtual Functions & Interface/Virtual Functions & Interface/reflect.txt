/*
*****************************************************************************
			Workshop - #8
Full Name  :Lorenz Alvin Tubo
Student ID#:109934224
Email      :ltubo@myseneca.ca

Authenticity Declaration:
I have done all the coding by myself and only copied the code that my
professor provided to complete my workshops and assignments.
*****************************************************************************
*/

1. What I have learned from the workshop

Virtual Functions
	> In this workshop I was able to learn more deeply about inheritance concepts that I learned last week. Moreover, I had a chance to learn more about the polymorphism of C++ and it was interesting.
 	  For the first time, I could learn the function of c++ called virtual function. First, a virtual function literally uses the keyword "virtual" to make it a virtual function. 
	  The reason for using such a virtual function is to override the function of the base class from the derived class. And when overriding a virtual function, the virtual function
	  of the derived class must have the same as the base class (shape as the return type, parameter, and function name). 
	  Also, if I use these same virtual functions, my program determines who the real object is at runtime. This is called dynamic binding.

Pure Virtual functions
	> You declare a pure virtual function by using a pure specifier ( = 0 ) in the declaration of a virtual member function in the class declaration. Class Shape is an abstract class. 
	  The compiler would not allow the function declarations Shape g() or void h(Shape) , declaration of object Shape , nor the static cast of b to type Shape .This class does not have a definition 
	  of a function and cannot create an instance. In other words,this class only serves to provide the body of the function to other derived classes to override. The class of 
	  overriding a pure virtual function is called a concrete class.The function can override a pure virtual function to fit the purpose of the class, and the class can create an 
	  instance. The last important point is the destructor. In situations where classes inherit from each other, the destructor should be made a virtual function because both the 
	  actual and the underlying objects must be destroyed.

2. What I found difficult
	what i found difficult was these terms they have used such as pure virtual functions, abstract base class, and concrete class and was complicated on how they are supposed to work, 
	but through this workshop I was able to organize the concept properly and practice enough. It was very interesting to create one abstract base class and inherit it with several 
	concrete classes and redefine the function in the derived class as another way from the base class.
