/*
*****************************************************************************
			Workshop - #7
Full Name  :Lorenz Alvin Tubo
Student ID#:109934224
Email      :ltubo@myseneca.ca

Authenticity Declaration:
I have done all the coding by myself and only copied the code that my
professor provided to complete my workshops and assignments.
*****************************************************************************
*/

1.Inheritance:
	> I learned the new function of C++ through this workshop. The newly learned feature is inheritance, one of the main features of c++. Until now,
 	  I have used member variables and functions by using "public, friend and helper" to use different functions outside of the class. 
	  But after learning the concept of inheritance,	it was possible to use the member variables and functions of the base class. 
	
	> The class that gives inheritance is called the parent/base/default class. Inherited classes are called child/derived classes. 
	  The relationship between base class and derived class is called "IS-A" relationship.Derived classes contain not only their own instance variables and functions,
	  but also variables and functions from the base class. When defining the most important derived classes,they use colons, keywords, and names of parent classes.
	  For example, class Dumper : public VehicleBasic.
	
	> There is a rule between the derived class and the parent class. When creating an instance of the derived class, the constructor of the derived class is 
	  always called after calling the constructor of the base class. However, when the instance of the derived class is terminated, the destructor of the derived class is called first,
	  followed by the destructor of the base class. Finally, it is possible to call the constructors of the base class directly from the constructors of the derived class. 
	  For example, when I create an instance of derived class using a variable in base class that is not in derived class. At this time, I can declare like 
	  Dumper::Dumper(const char* g_licensePlate, int g_year, int g_cap,const char* g_address):VehicleBasic(g_licensePlate,g_year) This is similar to when the derivative class was first declared.

2. About the Workshop:
	> In this workshop, I overloaded the insertion and extraction operators and implemented them to fit my code.
	  These functions were used as helper functions.
	> I also used write and read from base class inside of write and read in the derived class these functions were inherited from the base class and used in the derived class.

3.In conclusion, My thoughts when using inheritance for this workshop. I think that it is necessary to use inheritance when creating multiple classes with similar functions and variables
that play a similar role by using a base class and avoid unnecessary variable declarations and function declarations. Like creating a base class Animal and storing values that are repeated through out all 
Animals and having derived classes like Cat Dog etc.. that share smiliar functions and variables that they can inherit from the base class but also have distinct and unique members of their own.
